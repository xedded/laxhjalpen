import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  organization: process.env.OPENAI_ORG_ID,
});

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  expectedAnswer: string;
  explanation: string;
}

// Function to shuffle answer options and update correct answer index
function shuffleAnswerOptions(questions: Question[]): Question[] {
  return questions.map(question => {
    if (!question.options || question.options.length === 0) {
      return question;
    }

    // Find the correct answer text
    const correctAnswerText = question.options[question.correctAnswer];

    // Create array of options with their original indices
    const optionsWithIndex = question.options.map((option, index) => ({
      option,
      originalIndex: index
    }));

    // Shuffle the options array
    for (let i = optionsWithIndex.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [optionsWithIndex[i], optionsWithIndex[j]] = [optionsWithIndex[j], optionsWithIndex[i]];
    }

    // Extract shuffled options and find new correct answer index
    const shuffledOptions = optionsWithIndex.map(item => item.option);
    const newCorrectAnswerIndex = shuffledOptions.findIndex(option => option === correctAnswerText);

    return {
      ...question,
      options: shuffledOptions,
      correctAnswer: newCorrectAnswerIndex
    };
  });
}

export async function POST(request: NextRequest) {
  let text: string = '';

  try {
    const requestData = await request.json();
    text = requestData.text;

    if (!text || typeof text !== 'string') {
      console.error('No text provided');
      return NextResponse.json(
        { error: 'Text kr√§vs' },
        { status: 400 }
      );
    }

    console.log('üîç Starting question generation from text...');
    console.log('üìä Text length:', text.length);
    console.log('üìù Text preview:', text.substring(0, 100) + '...');

    // Generate comprehensive pedagogical questions from extracted text
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `Du √§r en erfaren l√§rare som skapar faktafr√•gor f√∂r grundskoleelever. Du l√§ser texten noggrant och skapar fr√•gor d√§r svaren √§r specifika fakta som n√§mns i texten.`
        },
        {
          role: "user",
          content: `L√§s denna text noggrant och skapa 8 faktafr√•gor baserat p√• KONKRETA FAKTA som n√§mns i texten:

"${text}"

VIKTIGA REGLER:
1. L√§s texten och identifiera specifika fakta som n√§mns (namn, platser, antal, vad saker best√•r av, etc.)
2. Skapa fr√•gor d√§r svaret √§r ett konkret faktum fr√•n texten
3. Svaret ska vara 1-3 ord som √§r direkt n√§mnda i texten
4. Ignorera meta-information om texten sj√§lv - fokusera bara p√• inneh√•llet

EXEMPEL P√Ö BRA FR√ÖGOR (om texten inneh√•ller denna info):
- Om texten s√§ger "Solen best√•r av v√§te och helium" ‚Üí Fr√•ga: "Vad best√•r solen av?" Svar: "V√§te och helium"
- Om texten s√§ger "Sverige har 25 landskap" ‚Üí Fr√•ga: "Hur m√•nga landskap har Sverige?" Svar: "25"
- Om texten s√§ger "Fotosyntesen sker i kloroplasterna" ‚Üí Fr√•ga: "Var sker fotosyntesen?" Svar: "Kloroplasterna"

Returnera JSON:
{
  "subject": "√§mne baserat p√• textinneh√•llet",
  "difficulty": "L√§tt/Medel/Sv√•r",
  "questions": [
    {
      "id": 1,
      "question": "Faktafr√•ga baserad p√• konkret information i texten",
      "options": ["korrekt svar fr√•n texten", "felaktigt alternativ", "felaktigt alternativ", "felaktigt alternativ"],
      "correctAnswer": 0,
      "expectedAnswer": "exakt svar fr√•n texten",
      "explanation": "Referens till var i texten svaret finns"
    }
  ]
}`
        }
      ],
      max_tokens: 2000,
      temperature: 0.4,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('Inget svar fr√•n OpenAI');
    }

    console.log('ü§ñ AI response received, length:', content.length);

    // Clean and parse JSON response
    let cleanContent = content.trim();
    if (cleanContent.startsWith('```json')) {
      cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    }
    if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }

    let result;
    try {
      result = JSON.parse(cleanContent);
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      console.error('Failed to parse content:', cleanContent);
      throw new Error(`JSON parsing failed: ${parseError instanceof Error ? parseError.message : 'Unknown parse error'}`);
    }

    // Validate structure
    if (!result.questions || !Array.isArray(result.questions) || result.questions.length === 0) {
      console.error('Invalid result structure:', result);
      throw new Error('Felaktig struktur i AI-svaret');
    }

    // Extract keywords from text for additional context
    const keywords = text
      .split(/[,\s\n\.\!\?]+/)
      .filter(word => word.length > 3)
      .slice(0, 10);

    console.log('‚úÖ Question generation completed successfully!');

    // Apply shuffling to questions
    result.questions = shuffleAnswerOptions(result.questions);
    console.log('üìö Subject identified:', result.subject);
    console.log('‚ùì Questions generated:', result.questions.length);
    console.log('üîë Keywords extracted:', keywords.length);

    return NextResponse.json({
      subject: result.subject || "Allm√§nbildning",
      difficulty: result.difficulty || "Medel",
      questions: result.questions,
      keywords,
      language: "svenska",
      isVocabulary: false
    });

  } catch (error) {
    console.error('Question generation error:', error);

    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error details:', errorMessage);

    // Simple fallback: use basic text analysis if AI fails
    if (text && text.length > 10) {
      try {
        console.log('üîÑ AI generation failed, creating simple fallback questions...');

        // Try to use AI for fallback too, but with simpler prompt
        const fallbackResponse = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "user",
              content: `Text: "${text}"

Skapa 3 enkla faktafr√•gor fr√•n denna text. Svaren ska vara ord/fraser som finns direkt i texten.

Format:
1. [Fr√•ga] - Svar: [ord fr√•n texten]
2. [Fr√•ga] - Svar: [ord fr√•n texten]
3. [Fr√•ga] - Svar: [ord fr√•n texten]`
            }
          ],
          max_tokens: 500,
          temperature: 0.2,
        });

        const fallbackContent = fallbackResponse.choices[0]?.message?.content || '';

        // Parse simple format or create basic questions
        const fallbackQuestions: Question[] = [];

        if (fallbackContent.includes('1.')) {
          const lines = fallbackContent.split('\n').filter(line => /^\d+\./.test(line.trim()));
          lines.slice(0, 3).forEach((line, index) => {
            const parts = line.split(' - Svar: ');
            if (parts.length === 2) {
              const question = parts[0].replace(/^\d+\.\s*/, '').trim();
              const answer = parts[1].trim();

              fallbackQuestions.push({
                id: index + 1,
                question: question,
                options: [answer, "Annat svar", "Information saknas", "Inte n√§mnt"],
                correctAnswer: 0,
                expectedAnswer: answer,
                explanation: `Svaret finns i texten.`
              });
            }
          });
        }

        // If parsing failed, create very basic questions
        if (fallbackQuestions.length === 0) {
          fallbackQuestions.push({
            id: 1,
            question: "Vad handlar texten om?",
            options: ["Textens inneh√•ll", "N√•got annat", "Oklart", "Information saknas"],
            correctAnswer: 0,
            expectedAnswer: "Textens inneh√•ll",
            explanation: "Baserat p√• textens inneh√•ll."
          });
        }

        console.log('‚úÖ Created', fallbackQuestions.length, 'simple fallback questions');

        const shuffledFallbackQuestions = shuffleAnswerOptions(fallbackQuestions);

        return NextResponse.json({
          subject: "L√§sf√∂rst√•else",
          difficulty: "L√§tt",
          questions: shuffledFallbackQuestions,
          keywords: [],
          language: "svenska",
          isVocabulary: false
        });
      } catch {
        console.log('üîÑ Simple fallback also failed, using demo questions');
      }
    }

    // Final fallback with demo questions
    const demoQuestions: Question[] = [
        {
          id: 1,
          question: "Vad √§r 7 + 5?",
          options: ["10", "11", "12", "13"],
          correctAnswer: 2,
          expectedAnswer: "tolv",
          explanation: "7 + 5 = 12"
        },
        {
          id: 2,
          question: "Vilken planet √§r n√§rmast solen?",
          options: ["Venus", "Merkurius", "Mars", "Jorden"],
          correctAnswer: 1,
          expectedAnswer: "Merkurius",
          explanation: "Merkurius ligger n√§rmast solen"
        }
      ];

    // Shuffle demo questions too
    const shuffledDemoQuestions = shuffleAnswerOptions(demoQuestions);

    return NextResponse.json({
      subject: "Allm√§nkunskap",
      difficulty: "L√§tt",
      questions: shuffledDemoQuestions,
      keywords: ["matematik", "astronomi"],
      language: "svenska",
      isVocabulary: false
    });
  }
}